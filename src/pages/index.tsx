import Head from "next/head";
//hooks
import { useRouter } from "next/router";
//components
import { Input } from "@/components/Input/Input";
//styles
import styles from "@/styles/Home.module.css";
import { useContext, useEffect, useState } from "react";
import GameMode from "@/components/GameMode";
import SocketContext from "@/context/SocketContext";
import { Board } from "@/components/Board/Board";

export default function Home() {
  const context = useContext(SocketContext);
  const {
    clientsConnected,
    isSavedPlayer,
    socketConnected,
    setPlayerName,
    handlePlayerName,
    playerName,
    socket,
    handleMode,
    gameAlreadyOn,
    board,
    gameHasStarted,
  } = context;

  const [msg, setMsg] = useState<string | null>(null);
  const [tableAnswered, setTableAnswered] = useState<boolean>(false);

  const sa = {
    fontSize: "1.2em",
    fontFamily: "Open Sans, sans-serif",
  };

  return (
    <>
      <Head>
        <title>Bingo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3 className={styles.users_connected_text}>
          users connected: {clientsConnected}
        </h3>
        {!isSavedPlayer && (
          <>
            <h1 className={styles.title}>bingo</h1>

            <h2 className={styles.text}>start game</h2>
            {gameAlreadyOn && (
              <p style={sa}>
                Actualmente hay un juego en progrese espere unos minutos
              </p>
            )}
            <div className={styles.form}>
              {socketConnected ? (
                <>
                  <Input
                    label="Put your name"
                    type="text"
                    onChange={(e: string) => setPlayerName(e)}
                  />
                  <button
                    onClick={() => handlePlayerName(playerName)}
                    className={styles.button}
                    disabled={!playerName}
                  >
                    start
                  </button>
                </>
              ) : (
                <>
                  <h2 className={styles.text}>No server connected</h2>
                </>
              )}
            </div>

            <h2 className={styles.text}>Select Game mode</h2>
            <div className={styles.form}>
              <button
                className={styles.game_mode_buttons}
                onClick={() => {
                  setMsg("NORMAL");
                  if (socket) {
                    socket.emit("set-mode", {
                      mode: "NORMAL",
                    });
                  }
                }}
              >
                Normal
              </button>
              <button
                className={styles.game_mode_buttons}
                onClick={() => {
                  setMsg("FULL");
                  if (socket) {
                    socket.emit("set-mode", {
                      mode: "FULL",
                    });
                  }
                }}
              >
                Full Board
              </button>
            </div>
          </>
        )}

        {board.length != 0 && !gameHasStarted && (
          <p style={sa}>
            The game will start when all the players accept their table
          </p>
        )}

        {board.length == 0 && msg && !isSavedPlayer && (
          <p style={sa}>
            the next time that i game starts it will be set to : {msg}
          </p>
        )}

        {isSavedPlayer && !board.length && (
          <GameMode
            socket={socket}
            playerName={playerName}
            handleMode={handleMode}
          />
        )}

        {board.length != 0 && !gameHasStarted && !tableAnswered && (
          <>
            <button
              onClick={() => {
                if (socket) {
                  socket.emit("answer-table", { accept: true });
                }
                setTableAnswered(true);
              }}
            >
              Accept Table
            </button>
            <button
              onClick={() => {
                if (socket) {
                  socket.emit("answer-table", { accept: false });
                }
              }}
            >
              Reject Table
            </button>
          </>
        )}

        {board.length > 0 && <Board />}
      </main>
    </>
  );
}
