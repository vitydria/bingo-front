import Head from "next/head";
//hooks
import { useRouter } from "next/router";
//components
import { Input } from "@/components/Input/Input";
//styles
import styles from "@/styles/Home.module.css";
import { useContext, useEffect } from "react";
import GameMode from "@/components/GameMode";
import SocketContext from "@/context/SocketContext";

const url = "localhost:3000/socket.io/socket.io.js";

export default function Home() {

  const context = useContext(SocketContext)
  const { push } = useRouter();
  const { handleSocket,
    openGameMode,
    clientsConnected,
    isSavedPlayer,
    socketConnected,
    setPlayerName,
    handlePlayerName,
    playerName, 
    isHost,
    socket,
    handleMode } = context;
  
  const handleScreen = () => {
    push('/game');
  }
  
    useEffect(() => { 
      handleSocket();
    }, []);
    
    useEffect(() => {
      if(openGameMode.isSaved)
      handleScreen();
    }, [openGameMode.isSaved])
  
  return (
    <>
      <Head>
        <title>Bingo</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3 className={styles.users_connected_text}>
          users connected: {clientsConnected}{" "}
        </h3>
        {!isSavedPlayer && (
          <>
            <h1 className={styles.title}>bingo</h1>

            <h2 className={styles.text}>start game</h2>
            <div className={styles.form}>
              {socketConnected ? (
                <>
                  <Input
                    label="Put your name"
                    type="text"
                    onChange={(e: string) => setPlayerName(e)}
                  />
                  <button
                    onClick={() => handlePlayerName(playerName)}
                    className={styles.button}
                    disabled={!playerName}
                  >
                    start
                  </button>
                </>
              ) : (
                <>
                  <h2 className={styles.text}>No server connected</h2>
                </>
              )}
            </div>
          </>
        )}

        {(isSavedPlayer && isHost) && (
          <GameMode
            socket={socket}
            playerName={playerName}
            handleMode={handleMode}
          />
        )}
        {(isSavedPlayer && !isHost) && (
          <h1 className={styles.text}>Waiting for host...</h1>
        )}
      </main>
    </>
  );
}
